{"version":3,"sources":["redux/phonebook/phonebook-selectors.js","components/Notification/Notification.jsx","components/Notification/Notification.module.css","pages/LoginPage/LoginPage.module.css","pages/LoginPage/LoginPage.js"],"names":["getFilter","state","phonebook","filter","getAllContacts","contacts","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","getError","error","Notification","this","props","errorAuth","setTimeout","clearErrorAuth","errorPb","clearErrorPb","in","message","timeout","classNames","s","unmountOnExit","className","overlay","Component","connect","authSelectors","dispatch","phonebookActions","authActions","clearError","module","exports","LoginPage","email","password","handleChange","target","value","setState","handleSubmit","e","preventDefault","onLogin","appear","title","isLoadingAuth","form","onSubmit","autoComplete","htmlFor","label","input","type","onChange","button","mapDispatchToProps","authOperations","logIn"],"mappings":"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","file":"static/js/5.84aab05a.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.phonebook.loading;\n\nconst getFilter = state => state.phonebook.filter;\n\nconst getAllContacts = state => state.phonebook.contacts;\n\nconst getError = state => state.phonebook.error;\n\n//Без мемоизации\n// const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(normalizedFilter),\n//     );\n// };\n\n//С мемоизацией\nconst getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n\nconst selectors = {\n    getLoading,\n    getFilter,\n    getVisibleContacts,\n    getAllContacts,\n    getError\n};\n\nexport default selectors;","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport * as phonebookActions from '../../redux/phonebook/phonebook-actions';\r\nimport selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport authActions from '../../redux/auth/auth-actions';\r\nimport { connect } from 'react-redux';\r\nimport s from './Notification.module.css';\r\n\r\nclass Notification extends Component {\r\n\r\n   componentDidUpdate() {\r\n      if (this.props.errorAuth) {\r\n         setTimeout(() => {\r\n            this.props.clearErrorAuth(this.state);\r\n         }, 2500);\r\n         return;\r\n      }\r\n      if (this.props.errorPb) {\r\n         setTimeout(() => {\r\n            this.props.clearErrorPb(this.state);\r\n         }, 2500);\r\n         return;\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <CSSTransition\r\n            in={this.props.message}\r\n            timeout={250}\r\n            classNames={s}\r\n            unmountOnExit\r\n         >\r\n            <div className={s.overlay} >\r\n               <p className={s.message}>\r\n                  {this.props.message}\r\n               </p>\r\n            </div>\r\n         </CSSTransition>\r\n      );\r\n   };\r\n}\r\nconst mapStateToProps = (state) => ({\r\n   errorPb: selectors.getError(state),\r\n   errorAuth: authSelectors.getError(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   clearErrorPb: () => dispatch(phonebookActions.clearError()),\r\n   clearErrorAuth: () => dispatch(authActions.clearError())\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Notification_overlay__vCLZg\",\"message\":\"Notification_message__3r6L5\",\"enter\":\"Notification_enter__3r5QL\",\"enterActive\":\"Notification_enterActive__1-Fbs\",\"exit\":\"Notification_exit__2Fg2g\",\"exitActive\":\"Notification_exitActive__1iop4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginPage_form__USB3I\",\"label\":\"LoginPage_label__2JPJ4\",\"input\":\"LoginPage_input__28S4j\",\"button\":\"LoginPage_button__10O9f\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport authOperations from '../../redux/auth/auth-operations.js';\nimport { CSSTransition } from 'react-transition-group';\nimport authSelectors from '../../redux/auth/auth-selectors';\nimport Notification from '../../components/Notification/Notification';\nimport Spinner from '../../components/Spinner/Spinner';\nimport s from './LoginPage.module.css'\n\nclass LoginPage extends Component {\n  static propTypes = {\n    error: PropTypes.string,\n    isLoadingAuth: PropTypes.bool,\n  };\n\n  state = {\n    email: '',\n    password: '',\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onLogin(this.state);\n\n    this.setState({ name: '', email: '', password: '' });\n  };\n\n  render() {\n    const { email, password } = this.state;\n\n    return (\n      <div>\n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={s}\n          unmountOnExit\n        >\n          <h1 className={s.title}>Enter your data</h1>\n        </CSSTransition>\n\n\n        <Notification\n          message={this.props.error}\n        />\n\n        {this.props.isLoadingAuth && <Spinner />}\n\n        <form\n          className={s.form}\n          onSubmit={this.handleSubmit}\n          autoComplete=\"off\">\n          <label\n            htmlFor=\"email\"\n            className={s.label}>\n            Email </label>\n          <input\n            className={s.input}\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={this.handleChange}\n          />\n\n\n          <label\n            htmlFor=\"password\"\n            className={s.label}>\n            Password</label>\n          <input\n            className={s.input}\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={this.handleChange}\n          />\n\n\n          <button\n            className={s.button}\n            type=\"submit\">Login</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  error: authSelectors.getError(state),\n  isLoadingAuth: authSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onLogin: authOperations.logIn,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);\n\n"],"sourceRoot":""}