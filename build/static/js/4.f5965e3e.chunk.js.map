{"version":3,"sources":["redux/phonebook/phonebook-selectors.js","components/Notification/Notification.jsx","components/Notification/Notification.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/Logo/Logo.module.css","redux/phonebook/phonebook-operations.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Logo/Logo.jsx","pages/PhoneBookPage.js"],"names":["getFilter","state","phonebook","filter","getAllContacts","contacts","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","getError","error","Notification","this","props","errorAuth","setTimeout","clearErrorAuth","errorPb","clearErrorPb","in","message","timeout","classNames","s","unmountOnExit","className","overlay","Component","connect","authSelectors","dispatch","phonebookActions","authActions","clearError","module","exports","operations","fetchContacts","fetchContactRequest","axios","get","then","data","fetchContactSuccess","catch","fetchContactError","addContact","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","ContactForm","isShowMessage","setState","handleChange","e","currentTarget","value","handleSubmit","preventDefault","find","item","onSubmit","reset","container","label","input","type","placeholder","onChange","button","target","CSSTransition","length","appear","title","Contact","id","onClick","onDeleteContact","TransitionGroup","component","list","map","Logo","logo","PhoneBookPage","isLoadingContacts","Spinner","ommountOnExit"],"mappings":"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","file":"static/js/4.f5965e3e.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.phonebook.loading;\n\nconst getFilter = state => state.phonebook.filter;\n\nconst getAllContacts = state => state.phonebook.contacts;\n\nconst getError = state => state.phonebook.error;\n\n//Без мемоизации\n// const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(normalizedFilter),\n//     );\n// };\n\n//С мемоизацией\nconst getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n\nconst selectors = {\n    getLoading,\n    getFilter,\n    getVisibleContacts,\n    getAllContacts,\n    getError\n};\n\nexport default selectors;","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport * as phonebookActions from '../../redux/phonebook/phonebook-actions';\r\nimport selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport authSelectors from '../../redux/auth/auth-selectors';\r\nimport authActions from '../../redux/auth/auth-actions';\r\nimport { connect } from 'react-redux';\r\nimport s from './Notification.module.css';\r\n\r\nclass Notification extends Component {\r\n\r\n   componentDidUpdate() {\r\n      if (this.props.errorAuth) {\r\n         setTimeout(() => {\r\n            this.props.clearErrorAuth(this.state);\r\n         }, 2500);\r\n         return;\r\n      }\r\n      if (this.props.errorPb) {\r\n         setTimeout(() => {\r\n            this.props.clearErrorPb(this.state);\r\n         }, 2500);\r\n         return;\r\n      }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <CSSTransition\r\n            in={this.props.message}\r\n            timeout={250}\r\n            classNames={s}\r\n            unmountOnExit\r\n         >\r\n            <div className={s.overlay} >\r\n               <p className={s.message}>\r\n                  {this.props.message}\r\n               </p>\r\n            </div>\r\n         </CSSTransition>\r\n      );\r\n   };\r\n}\r\nconst mapStateToProps = (state) => ({\r\n   errorPb: selectors.getError(state),\r\n   errorAuth: authSelectors.getError(state)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   clearErrorPb: () => dispatch(phonebookActions.clearError()),\r\n   clearErrorAuth: () => dispatch(authActions.clearError())\r\n});\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"overlay\":\"Notification_overlay__vCLZg\",\"message\":\"Notification_message__3r6L5\",\"enter\":\"Notification_enter__3r5QL\",\"enterActive\":\"Notification_enterActive__1-Fbs\",\"exit\":\"Notification_exit__2Fg2g\",\"exitActive\":\"Notification_exitActive__1iop4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__3JWs-\",\"label\":\"ContactForm_label__1-XYi\",\"input\":\"ContactForm_input__R-HtY\",\"button\":\"ContactForm_button__2b3Y6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__3oy1e\",\"title\":\"Filter_title__-RrI_\",\"label\":\"Filter_label__n7hWY\",\"input\":\"Filter_input__2fN4d\",\"appear\":\"Filter_appear__3xmX0\",\"appearActive\":\"Filter_appearActive__2NGub\",\"exit\":\"Filter_exit__2TcBP\",\"exitActive\":\"Filter_exitActive__1HDfX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Contact_item__2n5ur\",\"button\":\"Contact_button__2SJ7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__1GZ_z\",\"enterActive\":\"ContactList_enterActive__2An--\",\"exit\":\"ContactList_exit__3erp7\",\"exitActive\":\"ContactList_exitActive__11cu4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__6Yu6W\"};","import axios from 'axios';\nimport {\n    fetchContactRequest,\n    fetchContactSuccess,\n    fetchContactError,\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError\n} from './phonebook-actions';\n\n\nconst fetchContacts = () => dispatch => {\n    dispatch(fetchContactRequest());\n\n    axios\n        .get('/contacts')\n        .then(({ data }) => dispatch(fetchContactSuccess(data)))\n        .catch(error => dispatch(fetchContactError(error)));\n};\n\n// Option with async/await, try/catch\n\n// const fetchContacts = () => async dispatch => {\n//     dispatch(fetchContactRequest());\n\n//     try {\n//         const { data } = await axios.get('/contacts');\n\n//         dispatch(fetchContactSuccess(data));\n//     } catch (error) {\n//         dispatch(fetchContactSuccess(error.message));\n//     }\n// }\n\nconst addContact = (name, number) => dispatch => {\n    const contact = {\n        name,\n        number,\n    };\n\n    dispatch(addContactRequest());\n\n    axios\n        .post('/contacts', contact)\n        .then(({ data }) => dispatch(addContactSuccess(data)))\n        .catch(error => dispatch(addContactError(error.message)));\n};\n\nconst deleteContact = (contactId) => dispatch => {\n    dispatch(deleteContactRequest());\n\n    axios\n        .delete(`/contacts/${contactId}`)\n        .then(() => dispatch(deleteContactSuccess(contactId)))\n        .catch(error => dispatch(deleteContactError(error.message)));\n};\n\nconst operations = {\n    fetchContacts,\n    addContact,\n    deleteContact\n};\n\nexport default operations;","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/phonebook/phonebook-operations'\r\nimport selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport Notification from '../../components/Notification/Notification';\r\nimport s from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n\r\n   state = {\r\n      name: '',\r\n      number: '',\r\n      message: null,\r\n   }\r\n\r\n   isShowMessage = (error) => {\r\n      this.setState({ message: false });\r\n      setTimeout(() => {\r\n         this.setState({ message: null });\r\n      }, 2500);\r\n   }\r\n\r\n\r\n   handleChange = e => {\r\n      const { name, value } = e.currentTarget;\r\n\r\n      this.setState({\r\n         [name]: value,\r\n      })\r\n   }\r\n\r\n\r\n   handleSubmit = e => {\r\n      const { name, number } = this.state;\r\n      e.preventDefault();\r\n\r\n      if (name === '') {\r\n         this.isShowMessage('Enter name, please!');\r\n         return;\r\n\r\n      }\r\n      if (number === '') {\r\n         this.isShowMessage('Enter phone, please!');\r\n         return;\r\n      }\r\n\r\n      if (\r\n         this.props.contacts.find((item) => item.name.toLowerCase() === name.toLowerCase())) {\r\n         this.isShowMessage(`${name} is already in contacts.`);\r\n         return;\r\n      }\r\n\r\n      this.props.onSubmit(name, number);\r\n      this.reset();\r\n   }\r\n\r\n\r\n   reset = () => (\r\n      this.setState({ name: \"\", number: \"\" })\r\n   )\r\n\r\n   render() {\r\n\r\n      const { name, number, message } = this.state;\r\n      return (\r\n         <>\r\n\r\n            <Notification\r\n               message={message} />\r\n\r\n            <form className={s.container} onSubmit={this.handleSubmit}>\r\n\r\n               <label className={s.label}>\r\n                  Name\r\n               </label>\r\n               <input\r\n                  className={s.input}\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"enter your name\"\r\n                  value={name}\r\n                  onChange={this.handleChange}\r\n               />\r\n               <label className={s.label}>\r\n                  Phone number\r\n               </label>\r\n               <input\r\n                  className={s.input}\r\n                  type=\"tel\"\r\n                  name=\"number\"\r\n                  placeholder=\"enter your number\"\r\n                  value={number}\r\n                  onChange={this.handleChange} />\r\n               <button className={s.button} type=\"submit\">Add contact</button>\r\n            </form>\r\n         </>\r\n      );\r\n   }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n   contacts: selectors.getAllContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   onSubmit: (name, number) => dispatch(operations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import { connect } from 'react-redux';\r\nimport * as phonebookActions from '../../redux/phonebook/phonebook-actions';\r\nimport selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange, contacts }) => {\r\n   return (\r\n      <CSSTransition\r\n         in={contacts.length > 1}\r\n         appear={true}\r\n         timeout={250}\r\n         classNames={s}\r\n         unmountOnExit\r\n      >\r\n         <div className={s.container}>\r\n\r\n            <h2 className={s.title}> Contacts </h2>\r\n            <label className={s.label}>\r\n               Find contacts by name:\r\n            </label>\r\n            <input\r\n               className={s.input}\r\n               placeholder=\"search by name\"\r\n               type=\"text\"\r\n               value={value}\r\n               onChange={onChange}\r\n            />\r\n\r\n         </div >\r\n      </CSSTransition>\r\n   );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n   value: selectors.getFilter(state),\r\n   contacts: selectors.getAllContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   onChange: e => dispatch(phonebookActions.changeFilter(e.target.value))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","\r\nimport PropTypes from 'prop-types';\r\nimport s from './Contact.module.css';\r\n\r\nconst Contact = ({ id, name, number, onClick }) => {\r\n   return (\r\n\r\n      <li key={id} className={s.item}>\r\n         <p className={s.contact}>{name}</p>\r\n         <p className={s.contact}>{number}</p>\r\n         <button\r\n            className={s.button}\r\n            type=\"button\"\r\n            onClick={onClick}\r\n         >\r\n            x\r\n                  </button>\r\n      </li>\r\n   )\r\n}\r\n\r\nContact.propTypes = {\r\n   name: PropTypes.string.isRequired,\r\n   number: PropTypes.string.isRequired,\r\n\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport operations from '../../redux/phonebook/phonebook-operations';\r\nimport selectors from '../../redux/phonebook/phonebook-selectors';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport Contact from 'components/Contact/Contact';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n   return (\r\n      <TransitionGroup\r\n         component=\"ul\"\r\n         className={s.list}\r\n      >\r\n         {contacts.map(({ id, name, number }) => (\r\n            <CSSTransition\r\n               key={id}\r\n               timeout={250}\r\n               classNames={s}\r\n            >\r\n               <Contact\r\n                  id={id}\r\n                  name={name}\r\n                  number={number}\r\n                  onClick={() => onDeleteContact(id)}\r\n               />\r\n            </CSSTransition>\r\n         ))\r\n         }\r\n      </TransitionGroup >\r\n\r\n   )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n   contacts: selectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   onDeleteContact: id => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport s from './Logo.module.css';\r\n\r\nconst Logo = () => {\r\n   return (\r\n      <h1 className={s.logo}>Phonebook</h1>\r\n   )\r\n}\r\n\r\nexport default Logo;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\nimport ContactList from '../components/ContactList/ContactList';\nimport { CSSTransition } from 'react-transition-group';\nimport Logo from '../components/Logo/Logo';\nimport operations from '../redux/phonebook/phonebook-operations';\nimport Spinner from '../components/Spinner/Spinner';\nimport Notification from '../components/Notification/Notification';\nimport selectors from '../redux/phonebook/phonebook-selectors';\n\nclass PhoneBookPage extends Component {\n\n    static propTypes = {\n        contacts: PropTypes.arrayOf(PropTypes.object),\n        fetchContacts: PropTypes.func,\n        isLoadingContacts: PropTypes.bool,\n        error: PropTypes.string\n    };\n\n    componentDidMount() {\n        this.props.fetchContacts();\n\n    };\n\n    render() {\n        return (\n            <>\n                <Logo />\n\n                <Notification\n                    message={this.props.error} />\n\n                <ContactForm />\n\n                <Filter />\n\n                {this.props.isLoadingContacts && <Spinner />}\n\n                <CSSTransition\n                    in={this.props.contacts.length > 0}\n                    timeout={0}\n                    ommountOnExit>\n                    <ContactList />\n                </CSSTransition>\n\n\n\n            </>\n        );\n    };\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: selectors.getAllContacts(state),\n    isLoadingContacts: selectors.getLoading(state),\n    error: selectors.getError(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchContacts: () => dispatch(operations.fetchContacts())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneBookPage);"],"sourceRoot":""}